// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "../../../../../../node_modules/bs-platform/lib/es6/list.js";
import * as Sync from "./Sync.js";
import * as $$Array from "../../../../../../node_modules/bs-platform/lib/es6/array.js";
import * as Async from "./Async.js";
import * as Curry from "../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Signal from "./Signal.js";
import * as Caml_array from "../../../../../../node_modules/bs-platform/lib/es6/caml_array.js";

function pure(value) {
  var was_sent = {
    contents: false
  };
  return Sync.make_input(function (param) {
              if (was_sent.contents) {
                return /* EndOfSignal */0;
              } else {
                was_sent.contents = true;
                return /* Data */{
                        _0: value
                      };
              }
            });
}

function empty(param) {
  return Sync.make_input(function (param) {
              return /* EndOfSignal */0;
            });
}

function from_list(list) {
  var list$prime = {
    contents: list
  };
  return Sync.make_input(function (param) {
              var match = list$prime.contents;
              if (match) {
                list$prime.contents = match.tl;
                return /* Data */{
                        _0: match.hd
                      };
              } else {
                return /* EndOfSignal */0;
              }
            });
}

function from_array(array) {
  var index = {
    contents: 0
  };
  return Sync.make_input(function (param) {
              var index$prime = index.contents;
              if (index$prime < array.length) {
                index.contents = index$prime + 1 | 0;
                return /* Data */{
                        _0: Caml_array.get(array, index$prime)
                      };
              } else {
                return /* EndOfSignal */0;
              }
            });
}

function pipe(output_stream, input_stream) {
  var more = true;
  while(more) {
    var value = Sync.next(input_stream);
    if (value) {
      Sync.send(value._0, output_stream);
    } else {
      more = false;
    }
  };
  
}

function map(f, stream) {
  return Sync.make_input(function (param) {
              return Signal.map(f, Sync.next(stream));
            });
}

function filter(f, stream) {
  return Sync.make_input(function (param) {
              var value = Sync.next(stream);
              while((function () {
                      var v = value;
                      if (v) {
                        return !Curry._1(f, v._0);
                      } else {
                        return false;
                      }
                    })()) {
                value = Sync.next(stream);
              };
              return value;
            });
}

function take(n, stream) {
  var index = {
    contents: 0
  };
  return Sync.make_input(function (param) {
              var value = index.contents < n ? Sync.next(stream) : /* EndOfSignal */0;
              index.contents = index.contents + 1 | 0;
              return value;
            });
}

function take$prime(n, stream) {
  var index = {
    contents: 0
  };
  return Sync.make_input(function (param) {
              var value = index.contents < n ? /* Data */({
                    _0: Sync.next(stream)
                  }) : /* EndOfSignal */0;
              index.contents = index.contents + 1 | 0;
              return value;
            });
}

function skip(n, stream) {
  var index = {
    contents: 0
  };
  var skipped = {
    contents: false
  };
  return Sync.make_input(function (param) {
              while(!skipped.contents) {
                if (index.contents >= n) {
                  skipped.contents = true;
                } else {
                  Sync.next(stream);
                }
                index.contents = index.contents + 1 | 0;
              };
              return Sync.next(stream);
            });
}

function until(f, ma) {
  return Sync.make_input(function (param) {
              return Signal.filter(f, Sync.next(ma));
            });
}

function fold_left(f, init, stream) {
  var more = true;
  var result = init;
  while(more) {
    var value = Sync.next(stream);
    if (value) {
      result = Curry._2(f, result, value._0);
    } else {
      more = false;
    }
  };
  return result;
}

function concat(streams) {
  var streams$prime = {
    contents: streams
  };
  return Sync.make_input(function (param) {
              var _s = streams$prime.contents;
              while(true) {
                var s = _s;
                if (!s) {
                  return /* EndOfSignal */0;
                }
                var rest = s.tl;
                var value = Sync.next(s.hd);
                if (value) {
                  return /* Data */{
                          _0: value._0
                        };
                }
                streams$prime.contents = rest;
                _s = rest;
                continue ;
              };
            });
}

function flatten(stream_of_streams) {
  var current_stream = {
    contents: Sync.next(stream_of_streams)
  };
  return Sync.make_input(function (param) {
              var _s = current_stream.contents;
              while(true) {
                var s = _s;
                if (!s) {
                  return /* EndOfSignal */0;
                }
                var value = Sync.next(s._0);
                if (value) {
                  return value;
                }
                var stream$prime = Sync.next(stream_of_streams);
                current_stream.contents = stream$prime;
                _s = stream$prime;
                continue ;
              };
            });
}

function to_rev_list(stream) {
  var list = /* [] */0;
  var more = true;
  while(more) {
    var value = Sync.next(stream);
    if (value) {
      list = {
        hd: value._0,
        tl: list
      };
    } else {
      more = false;
    }
  };
  return list;
}

function to_list(x) {
  return List.rev(to_rev_list(x));
}

function to_array(x) {
  return $$Array.of_list(List.rev(to_rev_list(x)));
}

var Sync$1 = {
  make_output: Sync.make_output,
  send: Sync.send,
  pure: pure,
  empty: empty,
  from_list: from_list,
  from_array: from_array,
  pipe: pipe,
  map: map,
  filter: filter,
  take: take,
  take$prime: take$prime,
  skip: skip,
  until: until,
  fold_left: fold_left,
  concat: concat,
  flatten: flatten,
  to_rev_list: to_rev_list,
  to_list: to_list,
  to_array: to_array
};

function pure$1(value) {
  var was_sent = {
    contents: false
  };
  return Async.make(function (cb) {
              if (was_sent.contents) {
                return Curry._1(cb, /* EndOfSignal */0);
              } else {
                Curry._1(cb, /* Data */{
                      _0: value
                    });
                was_sent.contents = true;
                return ;
              }
            });
}

function empty$1(param) {
  return Async.make(function (cb) {
              return Curry._1(cb, /* EndOfSignal */0);
            });
}

function from_list$1(list) {
  return Async.make(function (cb) {
              var _param = list;
              while(true) {
                var param = _param;
                if (!param) {
                  return Curry._1(cb, /* EndOfSignal */0);
                }
                Curry._1(cb, /* Data */{
                      _0: param.hd
                    });
                _param = param.tl;
                continue ;
              };
            });
}

function map$1(f, stream) {
  return Async.make(function (cb) {
              return Async.listen((function (value) {
                            return Curry._1(cb, Signal.map(f, value));
                          }), stream);
            });
}

function filter$1(f, stream) {
  return Async.make(function (cb) {
              return Async.listen((function (value) {
                            if (!value) {
                              return Curry._1(cb, /* EndOfSignal */0);
                            }
                            var value$1 = value._0;
                            if (Curry._1(f, value$1)) {
                              return Curry._1(cb, /* Data */{
                                          _0: value$1
                                        });
                            }
                            
                          }), stream);
            });
}

function scan(f, init, stream) {
  var acc = {
    contents: init
  };
  return Async.make(function (cb) {
              return Async.listen((function (value) {
                            if (value) {
                              acc.contents = Curry._2(f, acc.contents, value._0);
                              return Curry._1(cb, /* Data */{
                                          _0: acc.contents
                                        });
                            } else {
                              return Curry._1(cb, /* EndOfSignal */0);
                            }
                          }), stream);
            });
}

function take$1(n, stream) {
  var index = {
    contents: 0
  };
  return Async.make(function (cb) {
              return Async.listen((function (value) {
                            if (value && index.contents < n) {
                              index.contents = index.contents + 1 | 0;
                              return Curry._1(cb, /* Data */{
                                          _0: value._0
                                        });
                            } else {
                              return Curry._1(cb, /* EndOfSignal */0);
                            }
                          }), stream);
            });
}

function take$prime$1(close, n, stream) {
  var index = {
    contents: 0
  };
  return Async.make(function (cb) {
              return Async.listen((function (value) {
                            var match = index.contents < n;
                            if (match) {
                              index.contents = index.contents + 1 | 0;
                              return Curry._1(cb, /* Data */{
                                          _0: value
                                        });
                            } else if (close !== undefined) {
                              Sync.send(undefined, close);
                              return Curry._1(cb, /* EndOfSignal */0);
                            } else {
                              return Curry._1(cb, /* EndOfSignal */0);
                            }
                          }), stream);
            });
}

var Async$1 = {
  pure: pure$1,
  empty: empty$1,
  from_list: from_list$1,
  map: map$1,
  filter: filter$1,
  scan: scan,
  take: take$1,
  take$prime: take$prime$1
};

export {
  Sync$1 as Sync,
  Async$1 as Async,
  
}
/* No side effect */
