// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Caml_option from "../../../../../../node_modules/bs-platform/lib/es6/caml_option.js";

function pure(value) {
  return /* Data */{
          _0: value
        };
}

function empty(param) {
  return /* EndOfSignal */0;
}

function $$default(default_value, value) {
  if (value) {
    return value._0;
  } else {
    return default_value;
  }
}

function satisfies(f, value) {
  if (value) {
    return Curry._1(f, value._0);
  } else {
    return false;
  }
}

function map(f, ma) {
  if (ma) {
    return /* Data */{
            _0: Curry._1(f, ma._0)
          };
  } else {
    return /* EndOfSignal */0;
  }
}

function filter(f, ma) {
  if (!ma) {
    return /* EndOfSignal */0;
  }
  var value = ma._0;
  if (Curry._1(f, value)) {
    return /* Data */{
            _0: value
          };
  } else {
    return /* EndOfSignal */0;
  }
}

function fold(f, init, ma) {
  if (ma) {
    return Curry._2(f, init, ma._0);
  } else {
    return init;
  }
}

function from_option(value) {
  if (value !== undefined) {
    return /* Data */{
            _0: Caml_option.valFromOption(value)
          };
  } else {
    return /* EndOfSignal */0;
  }
}

function to_option(value) {
  if (value) {
    return Caml_option.some(value._0);
  }
  
}

export {
  pure ,
  empty ,
  $$default ,
  $$default as default,
  satisfies ,
  map ,
  filter ,
  fold ,
  from_option ,
  to_option ,
  
}
/* No side effect */
