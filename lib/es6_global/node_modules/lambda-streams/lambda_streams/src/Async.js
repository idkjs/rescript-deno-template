// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Sync from "./Sync.js";
import * as Curry from "../../../../../../node_modules/bs-platform/lib/es6/curry.js";
import * as Caml_option from "../../../../../../node_modules/bs-platform/lib/es6/caml_option.js";

function make(f) {
  return f;
}

function listen(cb, stream) {
  return Curry._1(stream, cb);
}

function pure(value, cb) {
  return Curry._1(cb, value);
}

function map(f, stream, cb) {
  return Curry._1(stream, (function (value) {
                return Curry._1(cb, Curry._1(f, value));
              }));
}

function filter(f, stream, cb) {
  return Curry._1(stream, (function (value) {
                if (Curry._1(f, value)) {
                  return Curry._1(cb, value);
                }
                
              }));
}

function scan(f, init, stream) {
  var acc = {
    contents: init
  };
  return function (cb) {
    return Curry._1(stream, (function (value) {
                  acc.contents = Curry._2(f, acc.contents, value);
                  return Curry._1(cb, acc.contents);
                }));
  };
}

function Interval(I) {
  var forever = function (ms) {
    var i = {
      contents: 0
    };
    return function (cb) {
      Curry._2(I.set_interval, (function (param) {
              i.contents = i.contents + 1 | 0;
              return Curry._1(cb, i.contents);
            }), ms);
      
    };
  };
  var make = function (ms) {
    var i = {
      contents: 0
    };
    var interval = {
      contents: undefined
    };
    var stream = function (cb) {
      interval.contents = Caml_option.some(Curry._2(I.set_interval, (function (param) {
                  i.contents = i.contents + 1 | 0;
                  return Curry._1(cb, i.contents);
                }), ms));
      
    };
    return {
            stream: stream,
            close: Sync.make_output(function (param) {
                  var interval$prime = interval.contents;
                  if (interval$prime !== undefined) {
                    return Curry._1(I.clear_interval, Caml_option.valFromOption(interval$prime));
                  }
                  
                })
          };
  };
  return {
          forever: forever,
          make: make
        };
}

export {
  make ,
  listen ,
  pure ,
  map ,
  filter ,
  scan ,
  Interval ,
  
}
/* No side effect */
